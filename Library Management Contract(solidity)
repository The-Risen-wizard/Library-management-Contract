//SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract Library {
    address public Librarian;

    mapping(address => Books) public booksBalance;
    mapping(address => uint) public numBalance;

    struct Books {
        string name;
        string jonor;
        uint id;
    }

    constructor() public {
        Librarian = msg.sender;
    }

    Books[] books;


    function createBooks(string memory _name, string memory _genere, uint _id) public {
        require(msg.sender == Librarian, "Need Librarian to authorize the books");
        books.push(Books(_name, _genere, _id));
    }

    function transfer(address _issuer, string memory _name) public payable {
        require(msg.sender == Librarian, "Need Librarian to issue the books");
        require(numBalance[_issuer] <= 3, "Not allowed");
        for(uint i=0; i < books.length; i++) {
            if(keccak256(abi.encodePacked(_name)) == keccak256(abi.encodePacked(books[i].name))) {
                booksBalance[_issuer] = books[i];
                numBalance[_issuer]++;
            }
        } 
    }

    function return_Total() public view returns(uint) {
        return books.length;
    }

    function returnBook() public {
        require(numBalance[msg.sender] <= 3 , "Emptiness");
        delete(booksBalance[msg.sender]);
        numBalance[msg.sender]--;
    }
}
